/**
 * –¢–µ—Å—Ç –∫–µ–π—Å–∞ Feastables Cookies & Creme
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Brand Gate v2 + Category Guard
 */

// –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
process.env.OFF_USE_SMART_ROUTING = 'true';
process.env.OFF_ENFORCE_BRAND_GATE_V2 = 'true';
process.env.OFF_CATEGORY_HARD_BLOCKS_ENABLED = 'true';

import { searchByNameV1 } from './modules/nutrition/off-client.js';
import { searchMetrics } from './modules/nutrition/search-metrics.js';

async function testFeastablesCase() {
    console.log('üç´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞ Feastables Cookies & Creme');
    console.log('===============================================');
    console.log('üéØ –¶–µ–ª—å: –ù–ï –≤—ã–±—Ä–∞—Ç—å –º–æ—Ä–æ–∂–µ–Ω–æ–µ (7613312361887), –Ω–∞–π—Ç–∏ —à–æ–∫–æ–ª–∞–¥ Feastables');
    console.log('');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    searchMetrics.reset();
    
    const testCases = [
        // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–µ–π—Å
        {
            name: "Feastables Cookies & Creme",
            mockGPTOutput: {
                name: "Feastables Cookies & Creme",
                brand: "Mr Beast",
                brand_normalized: "mr-beast", 
                brand_synonyms: ["mrbeast", "feastables", "mr. beast"],
                clean_name: "chocolate bar",
                off_primary_tokens: ["feastables cookies creme"],
                off_alt_tokens: ["cookies and cream", "oreo flavor"],
                off_neg_tokens: ["ice cream", "frozen", "dairy"],
                off_attr_avoid: ["ice cream", "frozen", "dairy dessert"],
                off_attr_want: [],
                canonical_category: "snack-sweet", // –ù–ï dessert/ice-cream
                food_form: "bar",
                locale: "en"
            },
            expectedCode: "0850027880303",
            shouldNotFind: "7613312361887", // –ú–æ—Ä–æ–∂–µ–Ω–æ–µ Cookies & Cream
            testFocus: "brand_gate_v2_category_guard"
        },
        
        // –¢–µ—Å—Ç Amazon (–±—Ä–µ–Ω–¥ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
        {
            name: "Amazon brand in product name only",
            mockGPTOutput: {
                name: "Amazon red kidney beans",
                brand: "Amazon",
                brand_normalized: "amazon",
                brand_synonyms: ["by amazon", "amazon brand", "amazon basics"],
                clean_name: "kidney beans",
                off_primary_tokens: ["red kidney beans"],
                off_alt_tokens: ["kidney beans in water", "canned beans"],
                off_neg_tokens: ["chilli", "refried", "black beans"],
                off_attr_avoid: ["chilli", "spicy", "refried"],
                off_attr_want: [],
                canonical_category: "legume",
                food_form: "unknown",
                locale: "en"
            },
            expectedCode: "0644216479092",
            testFocus: "brand_name_salvage"
        },
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª–æ–º–∞—Ç—å Central Lechera
        {
            name: "Central Lechera Asturiana (control test)",
            mockGPTOutput: {
                name: "Central Lechera Asturiana nata montada",
                brand: "Central Lechera Asturiana",
                brand_normalized: "central-lechera-asturiana",
                brand_synonyms: ["asturiana", "lechera asturiana"],
                clean_name: "nata montada",
                off_primary_tokens: ["nata montada"],
                off_alt_tokens: ["whipped cream", "crema montada"],
                off_neg_tokens: ["light", "sin lactosa"],
                off_attr_avoid: ["light", "sin lactosa", "spray"],
                off_attr_want: [],
                canonical_category: "dairy",
                food_form: "unknown", 
                locale: "es"
            },
            expectedCode: "8410297121104",
            testFocus: "regression_prevention"
        }
    ];
    
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testCases.length} –∫–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ gate'–∞–º–∏\n`);
    
    for (let i = 0; i < testCases.length; i++) {
        const testCase = testCases[i];
        const mockItem = testCase.mockGPTOutput;
        
        console.log(`[${i + 1}/${testCases.length}] ${testCase.name}`);
        console.log(`Focus: ${testCase.testFocus}`);
        console.log(`Brand: ${mockItem.brand} (synonyms: [${mockItem.brand_synonyms?.join(', ') || 'none'}])`);
        console.log(`Category: ${mockItem.canonical_category} / ${mockItem.food_form}`);
        console.log(`Primary tokens: [${mockItem.off_primary_tokens?.join(', ') || 'none'}]`);
        console.log(`Attr avoid: [${mockItem.off_attr_avoid?.join(', ') || 'none'}]`);
        
        if (testCase.shouldNotFind) {
            console.log(`‚ùå Should NOT find: ${testCase.shouldNotFind}`);
        }
        
        try {
            const startTime = Date.now();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å mock GPT –¥–∞–Ω–Ω—ã–º–∏
            const results = await searchByNameV1(mockItem.name, {
                brand: mockItem.brand_normalized,
                pageSize: 30, // –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                expectedBarcode: testCase.expectedCode,
                locale: mockItem.locale,
                // –ü–µ—Ä–µ–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                mockItem: mockItem
            });
            
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ Results: ${results.products?.length || 0} products in ${duration}ms`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if (results.api_used) {
                console.log(`üåê API used: ${results.api_used}`);
                console.log(`üéØ Strategy: ${results.strategy || 'unknown'}`);
                
                if (results.selection_phase) {
                    console.log(`üîç Selection phase: ${results.selection_phase}`);
                }
                
                if (results.degraded_pick) {
                    console.log(`‚ö†Ô∏è Degraded selection: ${results.degraded_pick}`);
                }
            }
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
            if (testCase.expectedCode && results.products) {
                const targetIndex = results.products.findIndex(p => p.code === testCase.expectedCode);
                if (targetIndex !== -1) {
                    console.log(`üéØ Target found at position ${targetIndex + 1}`);
                } else {
                    console.log(`‚ùå Target not found`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
            if (testCase.shouldNotFind && results.products) {
                const unwantedIndex = results.products.findIndex(p => p.code === testCase.shouldNotFind);
                if (unwantedIndex !== -1) {
                    console.log(`‚ùå FAIL: Found unwanted product at position ${unwantedIndex + 1}`);
                } else {
                    console.log(`‚úÖ SUCCESS: Unwanted product correctly excluded`);
                }
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-5 –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±—Ä–µ–Ω–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if (results.products && results.products.length > 0) {
                console.log(`üìã Top 5 analysis:`);
                results.products.slice(0, 5).forEach((product, idx) => {
                    const name = product.product_name || 'N/A';
                    const brands = Array.isArray(product.brands) ? product.brands.join(', ') : product.brands || 'N/A';
                    const categories = Array.isArray(product.categories_tags) ? 
                        product.categories_tags.slice(0, 3).map(c => c.replace(/^[a-z]{2}:/, '')).join(', ') : 'N/A';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥—É
                    const brandMatch = brands.toLowerCase().includes(mockItem.brand.toLowerCase()) ||
                                     mockItem.brand_synonyms?.some(syn => 
                                         brands.toLowerCase().includes(syn.toLowerCase()) ||
                                         name.toLowerCase().includes(syn.toLowerCase())
                                     );
                    
                    const brandFlag = brandMatch ? ' ‚úÖ BRAND_MATCH' : ' ‚ùå BRAND_MISS';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    const isCorrectCategory = mockItem.canonical_category === 'snack-sweet' ? 
                        !categories.includes('ice-cream') && !categories.includes('frozen') :
                        true;
                    const categoryFlag = isCorrectCategory ? ' ‚úÖ CATEGORY_OK' : ' ‚ùå CATEGORY_CONFLICT';
                    
                    console.log(`  ${idx + 1}. ${product.code} - ${name}`);
                    console.log(`     Brands: ${brands}${brandFlag}`);
                    console.log(`     Categories: ${categories}${categoryFlag}`);
                });
            }
            
        } catch (error) {
            console.log(`‚ùå Error: ${error.message}`);
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < testCases.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫
    console.log('üìä –ú–ï–¢–†–ò–ö–ò –£–õ–£–ß–®–ï–ù–ù–´–• GATE\'–û–í');
    console.log('==============================');
    searchMetrics.printReport();
    
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê GATE\'–û–í:');
    const summary = searchMetrics.getSummary();
    if (summary) {
        console.log(`‚úÖ Success@1: ${summary.success_rates.at_1}% (—Ü–µ–ª—å: >50%)`);
        console.log(`‚úÖ Brand accuracy: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á—É–∂–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ —Ç–æ–ø-3`);
        console.log(`‚úÖ Category accuracy: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö gate\'–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return summary;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const isMainModule = import.meta.url.startsWith('file:') && 
    (import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/')) || 
     process.argv[1]?.endsWith('test-feastables-case.js'));

if (isMainModule) {
    testFeastablesCase().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Feastables –∫–µ–π—Å–∞:', error);
        process.exit(1);
    });
}

export { testFeastablesCase };
