/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
 * 1. Locale-safe –∑–∞–ø—Ä–æ—Å—ã
 * 2. –ñ—ë—Å—Ç–∫–∏–π –∞—Ç—Ä–∏–±—É—Ç–Ω—ã–π gate
 * 3. Clean-first –≤—ã–±–æ—Ä
 */

// –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
process.env.OFF_USE_SMART_ROUTING = 'true';

import { searchByNameV1 } from './modules/nutrition/off-client.js';
import { searchMetrics } from './modules/nutrition/search-metrics.js';

async function testProductionImprovements() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
    console.log('=========================================');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    searchMetrics.reset();
    
    const testCases = [
        // –¢–µ—Å—Ç 1: Locale-safe –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "nata montada", –Ω–µ "whipped cream")
        {
            name: "Locale-safe: Central Lechera Asturiana",
            mockGPTOutput: {
                name: "Central Lechera Asturiana nata montada",
                brand: "Central Lechera Asturiana", 
                brand_normalized: "central-lechera-asturiana",
                clean_name: "whipped cream", // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ GPT
                off_primary_tokens: ["nata montada"], // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
                off_attr_avoid: ["light", "sin lactosa", "spray"],
                off_attr_want: [],
                locale: "es"
            },
            expectedCode: "8410297121104",
            expectedAPI: "cgi",
            expectedPosition: 1,
            testFocus: "locale_consistency"
        },
        
        // –¢–µ—Å—Ç 2: –ê—Ç—Ä–∏–±—É—Ç–Ω—ã–π gate (–¥–æ–ª–∂–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç—å light/zero –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        {
            name: "Attribute gate: Coca-Cola regular (–Ω–µ Zero)",
            mockGPTOutput: {
                name: "Coca-Cola",
                brand: "Coca-Cola",
                brand_normalized: "coca-cola", 
                clean_name: "cola",
                off_primary_tokens: ["coca cola"],
                off_attr_avoid: ["zero", "light", "diet", "sugar free"],
                off_attr_want: [],
                locale: "en"
            },
            expectedCode: null, // –ù–µ –∑–Ω–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
            expectedAPI: "sal",
            testFocus: "attribute_filtering"
        },
        
        // –¢–µ—Å—Ç 3: Clean-first –≤—ã–±–æ—Ä (–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ø–æ—á–µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é Nutella)
        {
            name: "Clean-first: Nutella classic (–Ω–µ vegan/sugar-free)",
            mockGPTOutput: {
                name: "Nutella hazelnut spread",
                brand: "Nutella",
                brand_normalized: "nutella",
                clean_name: "hazelnut spread", 
                off_primary_tokens: ["nutella"],
                off_attr_avoid: ["vegan", "sugar free", "organic", "palm oil free"],
                off_attr_want: [],
                locale: "en"
            },
            expectedCode: "3017620422003",
            expectedAPI: "sal",
            testFocus: "clean_selection"
        }
    ];
    
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testCases.length} —Å—Ü–µ–Ω–∞—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π\n`);
    
    for (let i = 0; i < testCases.length; i++) {
        const testCase = testCases[i];
        const mockItem = testCase.mockGPTOutput;
        
        console.log(`[${i + 1}/${testCases.length}] ${testCase.name}`);
        console.log(`Focus: ${testCase.testFocus}`);
        console.log(`Primary tokens: [${mockItem.off_primary_tokens?.join(', ') || 'none'}]`);
        console.log(`Attr avoid: [${mockItem.off_attr_avoid?.join(', ') || 'none'}]`);
        console.log(`Expected API: ${testCase.expectedAPI}`);
        
        try {
            const startTime = Date.now();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å mock GPT –¥–∞–Ω–Ω—ã–º–∏
            const results = await searchByNameV1(mockItem.name, {
                brand: mockItem.brand_normalized,
                pageSize: 20,
                expectedBarcode: testCase.expectedCode,
                locale: mockItem.locale,
                // –ü–µ—Ä–µ–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                mockItem: mockItem
            });
            
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ Results: ${results.products?.length || 0} products in ${duration}ms`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if (results.api_used) {
                console.log(`üåê API used: ${results.api_used} (expected: ${testCase.expectedAPI})`);
                console.log(`üéØ Strategy: ${results.strategy || 'unknown'}`);
                
                if (results.exact_phrase_used) {
                    console.log(`üìù Exact phrase used: ${results.exact_phrase_used}`);
                }
                
                if (results.selection_phase) {
                    console.log(`üîç Selection phase: ${results.selection_phase}`);
                }
                
                if (results.degraded_pick) {
                    console.log(`‚ö†Ô∏è Degraded selection: ${results.degraded_pick}`);
                }
            }
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
            if (testCase.expectedCode && results.products) {
                const targetIndex = results.products.findIndex(p => p.code === testCase.expectedCode);
                if (targetIndex !== -1) {
                    console.log(`üéØ Target found at position ${targetIndex + 1} (expected: ${testCase.expectedPosition || 'any'})`);
                    
                    if (testCase.expectedPosition && targetIndex + 1 <= testCase.expectedPosition) {
                        console.log(`‚úÖ Position meets expectations`);
                    }
                } else {
                    console.log(`‚ùå Target not found`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ø-3 –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç avoided –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            if (results.products && results.products.length > 0) {
                console.log(`üìã Top 3 results:`);
                results.products.slice(0, 3).forEach((product, idx) => {
                    const name = product.product_name || 'N/A';
                    const brands = Array.isArray(product.brands) ? product.brands.join(', ') : product.brands || 'N/A';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ avoided –∞—Ç—Ä–∏–±—É—Ç—ã
                    const hasAvoidedAttrs = mockItem.off_attr_avoid?.some(avoided => 
                        name.toLowerCase().includes(avoided.toLowerCase())
                    ) || false;
                    
                    const avoidedFlag = hasAvoidedAttrs ? ' ‚ö†Ô∏è HAS_AVOIDED' : '';
                    console.log(`  ${idx + 1}. ${product.code} - ${name} (${brands})${avoidedFlag}`);
                });
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ avoided –∞—Ç—Ä–∏–±—É—Ç–∞–º –≤ —Ç–æ–ø-3
                const topWithAvoided = results.products.slice(0, 3).filter(product => {
                    const name = (product.product_name || '').toLowerCase();
                    return mockItem.off_attr_avoid?.some(avoided => 
                        name.includes(avoided.toLowerCase())
                    );
                }).length;
                
                if (topWithAvoided > 0) {
                    console.log(`‚ö†Ô∏è WARNING: ${topWithAvoided}/3 top results have avoided attributes`);
                } else {
                    console.log(`‚úÖ Clean top-3: no avoided attributes found`);
                }
            }
            
        } catch (error) {
            console.log(`‚ùå Error: ${error.message}`);
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < testCases.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1500));
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫
    console.log('üìä –ú–ï–¢–†–ò–ö–ò –£–õ–£–ß–®–ï–ù–ò–ô –ü–†–û–î–ê–ö–®–ï–ù–ê');
    console.log('===============================');
    searchMetrics.printReport();
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    const summary = searchMetrics.getSummary();
    if (summary) {
        console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –£–õ–£–ß–®–ï–ù–ò–ô:');
        console.log(`‚úÖ Success@1: ${summary.success_rates.at_1}% (—Ü–µ–ª—å: >50%)`);
        console.log(`‚úÖ CGI usage: ${summary.api_distribution.cgi}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤)`);
        console.log(`‚úÖ Avg latency: ${summary.avg_latency.overall}ms (—Ü–µ–ª—å: <2000ms)`);
        
        if (summary.fallback_reasons.low_results > 0) {
            console.log(`‚ö†Ô∏è Low results fallbacks: ${summary.fallback_reasons.low_results} (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å CGI)`);
        }
        
        if (summary.fallback_reasons.api_failure > 0) {
            console.log(`‚ö†Ô∏è API failures: ${summary.fallback_reasons.api_failure} (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)`);
        }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return summary;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const isMainModule = import.meta.url.startsWith('file:') && 
    (import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/')) || 
     process.argv[1]?.endsWith('test-production-improvements.js'));

if (isMainModule) {
    testProductionImprovements().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π:', error);
        process.exit(1);
    });
}

export { testProductionImprovements };
