#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
function detectFormFamily(categories) {
  if (!Array.isArray(categories)) return null;
  
  const categoryText = categories.join(' ').toLowerCase();
  
  // –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è
  if (categoryText.includes('chocolate') || 
      categoryText.includes('candies') || 
      categoryText.includes('confectioneries') ||
      categoryText.includes('sweet snacks')) {
    return 'confectionery';
  }
  
  // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  if (categoryText.includes('dairy') || 
      categoryText.includes('milk') || 
      categoryText.includes('butter') ||
      categoryText.includes('cream')) {
    return 'dairy';
  }
  
  return null;
}

function calculateSmartCompatibility(expectedForm, actualForm, categories = []) {
  const formFamily = detectFormFamily(categories);
  
  const familyRules = {
    'confectionery': {
      compatible: ['candy', 'bar', 'tablet', 'raw'],
      reason: 'confectionery_family'
    },
    'dairy': {
      compatible: ['spread', 'jar', 'whipped', 'drink', 'loaf'],
      reason: 'dairy_family'
    }
  };
  
  if (formFamily && familyRules[formFamily]) {
    const rule = familyRules[formFamily];
    const isCompatible = rule.compatible.includes(expectedForm) && rule.compatible.includes(actualForm);
    
    if (isCompatible) {
      return {
        isCompatible: true,
        confidence: 0.9,
        reason: rule.reason,
        family: formFamily
      };
    }
  }
  
  // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–æ—Ä–º—ã GPT
  const problematicForms = ['unknown', 'raw', 'soup', 'loaf'];
  
  if (problematicForms.includes(expectedForm)) {
    return {
      isCompatible: true,
      confidence: 0.3,
      reason: 'gpt_form_uncertainty',
      fallback: true
    };
  }
  
  return {
    isCompatible: false,
    confidence: 0.1,
    reason: 'no_compatibility'
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  {
    name: "M&M's Peanut Butter",
    expectedForm: "raw",
    actualForm: "candy", 
    categories: ["en:sweet snacks", "en:chocolate candies", "en:confectioneries"],
    shouldPass: true,
    reason: "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è: raw –∏ candy —Å–æ–≤–º–µ—Å—Ç–∏–º—ã"
  },
  {
    name: "Asturiana Mantequilla",
    expectedForm: "loaf",
    actualForm: "spread",
    categories: ["en:dairy", "en:butters", "en:spreads"],
    shouldPass: true,
    reason: "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: loaf –∏ spread —Å–æ–≤–º–µ—Å—Ç–∏–º—ã"
  },
  {
    name: "Coca Cola",
    expectedForm: "bottle",
    actualForm: "drink",
    categories: ["en:beverages", "en:sodas"],
    shouldPass: false,
    reason: "–ù–µ—Ç —Å–µ–º–µ–π—Å—Ç–≤–∞ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö"
  },
  {
    name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞",
    expectedForm: "unknown",
    actualForm: "candy",
    categories: ["en:sweet snacks"],
    shouldPass: true,
    reason: "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–æ—Ä–º—ã GPT —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"
  }
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º\n');

testCases.forEach((testCase, index) => {
  const result = calculateSmartCompatibility(
    testCase.expectedForm, 
    testCase.actualForm, 
    testCase.categories
  );
  
  const passed = result.isCompatible === testCase.shouldPass;
  const status = passed ? '‚úÖ PASS' : '‚ùå FAIL';
  
  console.log(`${index + 1}. ${testCase.name}`);
  console.log(`   Expected: ${testCase.expectedForm} ‚Üí Actual: ${testCase.actualForm}`);
  console.log(`   Categories: ${testCase.categories.join(', ')}`);
  console.log(`   Result: ${status}`);
  console.log(`   Family: ${result.family || 'none'}`);
  console.log(`   Reason: ${result.reason}`);
  console.log(`   Confidence: ${result.confidence}`);
  console.log(`   Expected: ${testCase.reason}`);
  console.log('');
});

console.log('üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ:');
console.log('1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–º–µ–π—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
console.log('2. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–µ–º–µ–π—Å—Ç–≤–∞');
console.log('3. Fallback –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–æ—Ä–º GPT');
console.log('4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—à–µ–Ω–∏—è');
