#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è SAL API –¥–ª—è —Å–ª—É—á–∞—è "nata montada" + "central-lechera-asturiana"
 * –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç 8410297121104
 */

import { runSearchV3 } from './modules/nutrition/off/client/search-sal.js';

const TARGET_BARCODE = '8410297121104';
const SEARCH_TERM = 'nata montada';
const BRAND_FILTER = 'central-lechera-asturiana';

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞
const MAX_PAGES = 20;

async function findProductInResults(products, targetBarcode) {
  for (let i = 0; i < products.length; i++) {
    if (products[i]?.code === targetBarcode) {
      return i + 1; // –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-based)
    }
  }
  return null;
}

async function testDirectSearch() {
  console.log('\n=== –¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Å –±—Ä–µ–Ω–¥–æ–º ===');
  console.log(`–ü–æ–∏—Å–∫: "${SEARCH_TERM}" + –±—Ä–µ–Ω–¥: "${BRAND_FILTER}"`);
  console.log(`–¶–µ–ª—å: –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE}\n`);

  let foundOnPage = null;
  let foundAtPosition = null;
  let totalProducts = 0;

  for (let page = 1; page <= MAX_PAGES; page++) {
    try {
      console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
      
      const result = await runSearchV3(SEARCH_TERM, {
        brandFilter: BRAND_FILTER,
        page,
        pageSize: 50 // —É–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      });

      console.log(`  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${result.products.length}, –≤—Å–µ–≥–æ: ${result.count}`);
      
      if (result.products.length === 0) {
        console.log(`  –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –ø—É—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫`);
        break;
      }

      totalProducts += result.products.length;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
      if (page <= 3) {
        console.log('  –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
        result.products.slice(0, 5).forEach((prod, idx) => {
          console.log(`    ${idx + 1}. ${prod.code} - ${prod.product_name} (${prod.brands})`);
        });
      }

      // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
      const position = await findProductInResults(result.products, TARGET_BARCODE);
      if (position) {
        foundOnPage = page;
        foundAtPosition = position;
        console.log(`\nüéØ –ù–ê–ô–î–ï–ù! –ü—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE} –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–æ–∑–∏—Ü–∏—è ${position}`);
        break;
      }

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
      break;
    }
  }

  if (!foundOnPage) {
    console.log(`\n‚ùå –ü—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE} –ù–ï –ù–ê–ô–î–ï–ù –≤ –ø–µ—Ä–≤—ã—Ö ${MAX_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`);
  }

  return { foundOnPage, foundAtPosition, totalProducts };
}

async function testWithCategory() {
  console.log('\n=== –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ===');
  console.log(`–ü–æ–∏—Å–∫: "${SEARCH_TERM}" + –±—Ä–µ–Ω–¥: "${BRAND_FILTER}" + –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "whipped-creams"`);

  try {
    const result = await runSearchV3(SEARCH_TERM, {
      brandFilter: BRAND_FILTER,
      filters: {
        categories_tags: ['whipped-creams']
      },
      page: 1,
      pageSize: 50
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: ${result.products.length}`);
    
    if (result.products.length > 0) {
      console.log('–ü—Ä–æ–¥—É–∫—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π whipped-creams:');
      result.products.slice(0, 10).forEach((prod, idx) => {
        const isTarget = prod.code === TARGET_BARCODE ? ' üéØ' : '';
        console.log(`  ${idx + 1}. ${prod.code} - ${prod.product_name}${isTarget}`);
      });
    }

    const position = await findProductInResults(result.products, TARGET_BARCODE);
    if (position) {
      console.log(`\nüéØ –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ù–ê–ô–î–ï–ù –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position}!`);
    } else {
      console.log(`\n‚ùå –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ù–ï –ù–ê–ô–î–ï–ù`);
    }

    return { found: !!position, position, total: result.products.length };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', error.message);
    return { found: false, error: error.message };
  }
}

async function testFallbackStrategy() {
  console.log('\n=== –¢–ï–°–¢ 3: Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ===');
  console.log(`–ü–æ–∏—Å–∫: '"nata montada"' (–≤ –∫–∞–≤—ã—á–∫–∞—Ö) –±–µ–∑ –±—Ä–µ–Ω–¥–∞, –Ω–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π`);

  try {
    // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const result = await runSearchV3('"nata montada"', {
      filters: {
        categories_tags: ['whipped-creams']
      },
      page: 1,
      pageSize: 50
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ: ${result.products.length}`);
    
    if (result.products.length > 0) {
      console.log('–ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ:');
      result.products.slice(0, 10).forEach((prod, idx) => {
        const isTarget = prod.code === TARGET_BARCODE ? ' üéØ' : '';
        const brand = prod.brands || '–±–µ–∑ –±—Ä–µ–Ω–¥–∞';
        console.log(`  ${idx + 1}. ${prod.code} - ${prod.product_name} [${brand}]${isTarget}`);
      });
    }

    const position = await findProductInResults(result.products, TARGET_BARCODE);
    if (position) {
      console.log(`\nüéØ –ü—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –ù–ê–ô–î–ï–ù –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position}!`);
    } else {
      console.log(`\n‚ùå –ü—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –ù–ï –ù–ê–ô–î–ï–ù`);
    }

    return { found: !!position, position, total: result.products.length };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error.message);
    return { found: false, error: error.message };
  }
}

async function testAlternativeCategories() {
  console.log('\n=== –¢–ï–°–¢ 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===');
  
  const categories = ['nata-montada', 'dairy-products', 'creams'];
  
  for (const category of categories) {
    console.log(`\n–ü—Ä–æ–±—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category}`);
    
    try {
      const result = await runSearchV3(SEARCH_TERM, {
        brandFilter: BRAND_FILTER,
        filters: {
          categories_tags: [category]
        },
        page: 1,
        pageSize: 20
      });

      console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${result.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
      
      if (result.products.length > 0) {
        const position = await findProductInResults(result.products, TARGET_BARCODE);
        if (position) {
          console.log(`  üéØ –ù–ê–ô–î–ï–ù –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}!`);
          return { found: true, category, position };
        }
      }
    } catch (error) {
      console.log(`  –û—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}: ${error.message}`);
    }
  }
  
  return { found: false };
}

async function main() {
  console.log('üîç –¢–ï–°–¢ –ü–û–í–ï–î–ï–ù–ò–Ø SAL API');
  console.log('=' * 50);
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫
    const directResult = await testDirectSearch();
    
    // –¢–µ—Å—Ç 2: –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    const categoryResult = await testWithCategory();
    
    // –¢–µ—Å—Ç 3: Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    const fallbackResult = await testFallbackStrategy();
    
    // –¢–µ—Å—Ç 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const altCategoriesResult = await testAlternativeCategories();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.log('\n' + '=' * 50);
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
    console.log('=' * 50);
    
    console.log(`\n1. –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Å –±—Ä–µ–Ω–¥–æ–º:`);
    if (directResult.foundOnPage) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${directResult.foundOnPage}, –ø–æ–∑–∏—Ü–∏—è ${directResult.foundAtPosition}`);
      console.log(`   üìà –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞: ${(directResult.foundOnPage - 1) * 50 + directResult.foundAtPosition} –ø–æ–∑–∏—Ü–∏–π`);
    } else {
      console.log(`   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –≤ ${MAX_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (${directResult.totalProducts} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)`);
    }
    
    console.log(`\n2. –ü–æ–∏—Å–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π whipped-creams:`);
    if (categoryResult.found) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${categoryResult.position} –∏–∑ ${categoryResult.total}`);
    } else {
      console.log(`   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ ${categoryResult.total || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    }
    
    console.log(`\n3. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –±—Ä–µ–Ω–¥–∞:`);
    if (fallbackResult.found) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${fallbackResult.position} –∏–∑ ${fallbackResult.total}`);
    } else {
      console.log(`   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ ${fallbackResult.total || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    }
    
    console.log(`\n4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
    if (altCategoriesResult.found) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${altCategoriesResult.category}" –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${altCategoriesResult.position}`);
    } else {
      console.log(`   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (directResult.foundOnPage && directResult.foundOnPage > 5) {
      console.log('- –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } else if (!directResult.foundOnPage && (categoryResult.found || fallbackResult.found)) {
      console.log('- –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç');
    } else if (!directResult.foundOnPage && !categoryResult.found && !fallbackResult.found) {
      console.log('- –ü—Ä–æ–¥—É–∫—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–Ω–¥–µ–∫—Å–µ –∏–ª–∏ –∏–º–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏');
    }
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
