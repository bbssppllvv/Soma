// Soma Telegram Bot - Working Version
// No external dependencies - pure Node.js + native fetch

export default async function handler(req, res) {
  // Only handle POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    // Check if message exists
    if (!update || !update.message) {
      return res.status(200).json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text || message.caption || '';
    const userId = message.from.id;
    const userName = message.from.first_name || 'User';
    
    console.log(`Received message from ${userName} (${userId}): ${text}`);

    // Get bot token
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN not configured');
      return res.status(500).json({ error: 'Bot token missing' });
    }

    // Handle commands
    let responseText = '';
    
    if (text === '/start') {
      responseText = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø Soma - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏
üîç –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã
üìä –î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –∏ –æ—Ü–µ–Ω–∫—É

–ö–æ–º–∞–Ω–¥—ã:
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel + Supabase!
–í–µ—Ä—Å–∏—è: 1.0 (—Ä–∞–±–æ—á–∞—è)`;

    } else if (text === '/help') {
      responseText = `ü§ñ Soma - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º
/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
/status - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì∏ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é

üîß –°—Ç–∞—Ç—É—Å: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
üöÄ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–æ—Ä–æ!`;

    } else if (text === '/test') {
      const now = new Date();
      const timeStr = now.toLocaleString('ru-RU', { 
        timeZone: 'Europe/Madrid',
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      responseText = `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!

üïê –í—Ä–µ–º—è: ${timeStr} (Madrid)
üåê –°–µ—Ä–≤–µ—Ä: Vercel (–°–®–ê)
üîß Runtime: Node.js ${process.version}
üíæ –ë–∞–∑–∞: Supabase –≥–æ—Ç–æ–≤–∞
ü§ñ AI: OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω
üì° Webhook: –ê–∫—Ç–∏–≤–µ–Ω

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç! üéâ`;

    } else if (text === '/status') {
      // Check environment variables
      const envStatus = {
        telegram: !!process.env.TELEGRAM_BOT_TOKEN,
        openai: !!process.env.OPENAI_API_KEY,
        supabase_url: !!process.env.SUPABASE_URL,
        supabase_key: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
        timezone: process.env.TIMEZONE_DEFAULT || 'not set'
      };

      responseText = `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Soma:

üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
${envStatus.telegram ? '‚úÖ' : '‚ùå'} Telegram Bot Token
${envStatus.openai ? '‚úÖ' : '‚ùå'} OpenAI API Key  
${envStatus.supabase_url ? '‚úÖ' : '‚ùå'} Supabase URL
${envStatus.supabase_key ? '‚úÖ' : '‚ùå'} Supabase Key
üåç Timezone: ${envStatus.timezone}

üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`;

    } else if (text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') || text.toLowerCase().includes('hello')) {
      responseText = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–Ø Soma - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`;

    } else {
      // Handle any other message
      responseText = `üìù –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"

üîß –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!
–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.

–ö–æ–º–∞–Ω–¥—ã: /start /help /test /status`;
    }

    // Send response via Telegram API
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: responseText,
      parse_mode: 'HTML'
    };

    console.log(`Sending response to chat ${chatId}:`, responseText.substring(0, 100) + '...');

    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!telegramResponse.ok) {
      const errorText = await telegramResponse.text();
      console.error('Telegram API error:', telegramResponse.status, errorText);
      return res.status(500).json({ 
        error: 'Failed to send message',
        telegram_status: telegramResponse.status,
        telegram_error: errorText
      });
    }

    const telegramResult = await telegramResponse.json();
    console.log('Message sent successfully:', telegramResult.ok);

    return res.status(200).json({ 
      ok: true,
      message_sent: true,
      telegram_response: telegramResult.ok
    });

  } catch (error) {
    console.error('Handler error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack?.substring(0, 500) : 'No stack'
    });
  }
}
