import { VercelRequest, VercelResponse } from '@vercel/node';

// Simple bot without external dependencies for testing
export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    if (!update.message) {
      return res.status(200).json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text || '';
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN not found');
      return res.status(500).json({ error: 'Bot token not configured' });
    }

    // Simple command handling
    let responseText = '';
    
    if (text === '/start') {
      responseText = 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Soma, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è.\n\n' +
                    'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏\n' +
                    'üîç –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –¥–∞–º —Å–æ–≤–µ—Ç\n\n' +
                    '–ö–æ–º–∞–Ω–¥—ã:\n' +
                    '/help - —Å–ø—Ä–∞–≤–∫–∞\n' +
                    '/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n' +
                    '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel + Supabase!';
    } else if (text === '/help') {
      responseText = 'ü§ñ Soma - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n' +
                    '–ö–æ–º–∞–Ω–¥—ã:\n' +
                    '/start - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ\n' +
                    '/test - –ø—Ä–æ–≤–µ—Ä–∫–∞\n' +
                    '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
                    '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n' +
                    '(–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–æ—Ä–æ)';
    } else if (text === '/test') {
      responseText = '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n' +
                    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Madrid' })}\n` +
                    'üîß –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n' +
                    `üíæ –ë–∞–∑–∞: Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n` +
                    `ü§ñ AI: OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω`;
    } else {
      responseText = `üìù –ü–æ–ª—É—á–∏–ª: "${text}"\n` +
                    '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.';
    }

    // Send message via Telegram API
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: responseText,
      parse_mode: 'HTML'
    };

    const telegramResponse = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!telegramResponse.ok) {
      const errorText = await telegramResponse.text();
      console.error('Telegram API error:', errorText);
      return res.status(500).json({ error: 'Failed to send message' });
    }

    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('Handler error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : String(error)
    });
  }
}
