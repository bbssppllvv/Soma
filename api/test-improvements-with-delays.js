#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π SAL API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
 * –£—á–∏—Ç—ã–≤–∞–µ–º rate limits –∏ –¥–∞—ë–º API –æ—Ç–¥–æ—Ö–Ω—É—Ç—å
 */

import { runSearchV3 } from './modules/nutrition/off/client/search-sal.js';

const TARGET_BARCODE = '8410297121104';
const SEARCH_TERM = 'nata montada';
const BRAND_FILTER = 'central-lechera-asturiana';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const DELAY_BETWEEN_REQUESTS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const DELAY_BETWEEN_TESTS = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
const MAX_PAGES_TO_TEST = 12; // –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 12 —Å—Ç—Ä–∞–Ω–∏—Ü

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function findProductInPages(searchTerm, brandFilter, maxPages, testName) {
  console.log(`\n=== ${testName} ===`);
  console.log(`–ü–æ–∏—Å–∫: "${searchTerm}" + –±—Ä–µ–Ω–¥: "${brandFilter || '–±–µ–∑ –±—Ä–µ–Ω–¥–∞'}"`);
  console.log(`–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: ${maxPages}`);
  
  let foundOnPage = null;
  let foundAtPosition = null;
  let totalProducts = 0;
  
  for (let page = 1; page <= maxPages; page++) {
    try {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
      
      const searchOptions = {
        page,
        pageSize: 50
      };
      
      if (brandFilter) {
        searchOptions.brandFilter = brandFilter;
      }
      
      const result = await runSearchV3(searchTerm, searchOptions);
      
      if (result.products.length === 0) {
        console.log(`  üì≠ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –ø—É—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫`);
        break;
      }
      
      console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ: ${result.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${result.count})`);
      totalProducts += result.products.length;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
      if (page <= 3) {
        console.log(`  üìã –¢–æ–ø-3 –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:`);
        result.products.slice(0, 3).forEach((prod, idx) => {
          const brand = prod.brands || '–±–µ–∑ –±—Ä–µ–Ω–¥–∞';
          console.log(`    ${idx + 1}. ${prod.code} - ${prod.product_name} [${brand}]`);
        });
      }
      
      // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
      const position = result.products.findIndex(prod => prod.code === TARGET_BARCODE);
      if (position >= 0) {
        foundOnPage = page;
        foundAtPosition = position + 1;
        console.log(`\nüéØ –ù–ê–ô–î–ï–ù! –ü—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–æ–∑–∏—Ü–∏—è ${position + 1}`);
        console.log(`üìà –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: ${(page - 1) * 50 + position + 1}`);
        break;
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
      if (page < maxPages) {
        console.log(`  ‚è≥ –ü–∞—É–∑–∞ ${DELAY_BETWEEN_REQUESTS/1000}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...`);
        await delay(DELAY_BETWEEN_REQUESTS);
      }
      
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${error.message}`);
      
      if (error.message.includes('aborted') || error.message.includes('timeout')) {
        console.log(`  üîÑ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...`);
        await delay(5000); // 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        try {
          const result = await runSearchV3(searchTerm, searchOptions);
          console.log(`  ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${result.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
          
          const position = result.products.findIndex(prod => prod.code === TARGET_BARCODE);
          if (position >= 0) {
            foundOnPage = page;
            foundAtPosition = position + 1;
            console.log(`\nüéØ –ù–ê–ô–î–ï–ù –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ! –ü—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–æ–∑–∏—Ü–∏—è ${position + 1}`);
            break;
          }
        } catch (retryError) {
          console.error(`  üí• –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${retryError.message}`);
          break;
        }
      } else {
        break;
      }
    }
  }
  
  return {
    found: foundOnPage !== null,
    page: foundOnPage,
    position: foundAtPosition,
    totalChecked: totalProducts,
    overallPosition: foundOnPage ? (foundOnPage - 1) * 50 + foundAtPosition : null
  };
}

async function testRescueStrategies() {
  console.log(`\n=== –¢–ï–°–¢ RESCUE –°–¢–†–ê–¢–ï–ì–ò–ô ===`);
  
  const rescueTests = [
    {
      name: '–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –±—Ä–µ–Ω–¥–∞',
      query: '"nata montada"',
      options: { pageSize: 30 }
    },
    {
      name: '–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –±–µ–∑ –±—Ä–µ–Ω–¥–∞',
      query: 'nata montada',
      options: { pageSize: 30 }
    },
    {
      name: '–ü–æ–∏—Å–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π whipped-creams',
      query: 'nata montada',
      options: {
        pageSize: 30,
        filters: { categories_tags: ['whipped-creams'] }
      }
    }
  ];
  
  for (const test of rescueTests) {
    try {
      console.log(`\nüîç ${test.name}:`);
      console.log(`  –ó–∞–ø—Ä–æ—Å: "${test.query}"`);
      
      const result = await runSearchV3(test.query, test.options);
      
      console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.products.length}`);
      
      if (result.products.length > 0) {
        const position = result.products.findIndex(prod => prod.code === TARGET_BARCODE);
        if (position >= 0) {
          console.log(`  üéØ –ù–ê–ô–î–ï–ù –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position + 1}!`);
        } else {
          console.log(`  üìã –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`);
          result.products.slice(0, 5).forEach((prod, idx) => {
            const brand = prod.brands || '–±–µ–∑ –±—Ä–µ–Ω–¥–∞';
            console.log(`    ${idx + 1}. ${prod.code} - ${prod.product_name} [${brand}]`);
          });
        }
      } else {
        console.log(`  üì≠ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É rescue —Ç–µ—Å—Ç–∞–º–∏
      await delay(3000);
      
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

async function main() {
  console.log('üöÄ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–ô SAL API –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ó–ê–î–ï–†–ñ–ö–ê–ú–ò');
  console.log('=' * 60);
  console.log(`–¶–µ–ª—å: –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç ${TARGET_BARCODE} (Central Lechera Asturiana Nata Montada)`);
  console.log(`–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: ${DELAY_BETWEEN_REQUESTS/1000}—Å`);
  console.log(`–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏: ${DELAY_BETWEEN_TESTS/1000}—Å`);
  
  try {
    // –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Å –±—Ä–µ–Ω–¥–æ–º (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü)
    const standardResult = await findProductInPages(
      SEARCH_TERM, 
      BRAND_FILTER, 
      5, 
      '–¢–ï–°–¢ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ (5 —Å—Ç—Ä–∞–Ω–∏—Ü)'
    );
    
    await delay(DELAY_BETWEEN_TESTS);
    
    // –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –±—Ä–µ–Ω–¥–æ–º (–¥–æ 12 —Å—Ç—Ä–∞–Ω–∏—Ü)
    let extendedResult = null;
    if (!standardResult.found) {
      extendedResult = await findProductInPages(
        SEARCH_TERM, 
        BRAND_FILTER, 
        MAX_PAGES_TO_TEST, 
        '–¢–ï–°–¢ 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–æ 12 —Å—Ç—Ä–∞–Ω–∏—Ü)'
      );
      
      await delay(DELAY_BETWEEN_TESTS);
    }
    
    // –¢–µ—Å—Ç 3: Rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    await testRescueStrategies();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.log(`\n${'='.repeat(60)}`);
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
    console.log(`${'='.repeat(60)}`);
    
    console.log(`\n1Ô∏è‚É£ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ (5 —Å—Ç—Ä–∞–Ω–∏—Ü):`);
    if (standardResult.found) {
      console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${standardResult.page}, –ø–æ–∑–∏—Ü–∏—è ${standardResult.position}`);
      console.log(`   üìà –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${standardResult.overallPosition}`);
      console.log(`   üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞`);
    } else {
      console.log(`   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
      console.log(`   üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${standardResult.totalChecked}`);
    }
    
    if (extendedResult) {
      console.log(`\n2Ô∏è‚É£ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–æ ${MAX_PAGES_TO_TEST} —Å—Ç—Ä–∞–Ω–∏—Ü):`);
      if (extendedResult.found) {
        console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${extendedResult.page}, –ø–æ–∑–∏—Ü–∏—è ${extendedResult.position}`);
        console.log(`   üìà –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${extendedResult.overallPosition}`);
        console.log(`   üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç!`);
      } else {
        console.log(`   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –¥–∞–∂–µ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ`);
        console.log(`   üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${extendedResult.totalChecked}`);
      }
    }
    
    console.log(`\nüéØ –í–´–í–û–î–´:`);
    const mainFound = standardResult.found || (extendedResult && extendedResult.found);
    if (mainFound) {
      const result = standardResult.found ? standardResult : extendedResult;
      if (result.page <= 5) {
        console.log(`   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∑–æ–Ω–µ –ø–æ–∏—Å–∫–∞`);
      } else {
        console.log(`   üîß –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ`);
        console.log(`   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏—Ç—å MAX_SEARCH_PAGES –¥–æ ${Math.max(result.page + 2, 12)}`);
      }
    } else {
      console.log(`   üîç –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ —Å –±—Ä–µ–Ω–¥–æ–º`);
      console.log(`   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–Ω—å—à–µ`);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
