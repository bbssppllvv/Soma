const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN || '', { polling: false });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    if (!update.message) {
      return res.status(200).json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text || '';

    // Simple command handling
    if (text === '/start') {
      await bot.sendMessage(chatId, 
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Soma, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è.\n\n' +
        'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏\n' +
        'üîç –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –¥–∞–º —Å–æ–≤–µ—Ç\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã:\n' +
        '/help - —Å–ø—Ä–∞–≤–∫–∞\n' +
        '/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã'
      );
    } else if (text === '/help') {
      await bot.sendMessage(chatId,
        'ü§ñ Soma - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã:\n' +
        '/start - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ\n' +
        '/test - –ø—Ä–æ–≤–µ—Ä–∫–∞\n' +
        '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
        '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!'
      );
    } else if (text === '/test') {
      await bot.sendMessage(chatId, 
        '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n' +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
        'üîß –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–∏—Ç–∞–Ω–∏—è'
      );
    } else {
      await bot.sendMessage(chatId,
        'üìù –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n' +
        '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    }
    
    return res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
