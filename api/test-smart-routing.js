/**
 * –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫
 */

// –í–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥
process.env.OFF_USE_SMART_ROUTING = 'true';

import { searchByNameV1 } from './modules/nutrition/off-client.js';
import { searchMetrics } from './modules/nutrition/search-metrics.js';

async function testSmartRouting() {
    console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞');
    console.log('===============================');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    searchMetrics.reset();
    
    const testCases = [
        // –õ–æ–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã ‚Üí –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ CGI
        {
            name: "Local Brand - Central Lechera Asturiana",
            query: "Central Lechera Asturiana nata montada",
            brand: "central-lechera-asturiana",
            expectedCode: "8410297121104",
            expectedAPI: "cgi",
            expectedStrategy: "cgi_primary"
        },
        {
            name: "Local Brand - Hacendado",
            query: "Hacendado galletas maria",
            brand: "hacendado", 
            expectedCode: null,
            expectedAPI: "cgi",
            expectedStrategy: "cgi_primary"
        },
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã ‚Üí –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ SAL (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
        {
            name: "Global Brand - Coca-Cola",
            query: "Coca-Cola Zero",
            brand: "coca-cola",
            expectedCode: "5000112658637",
            expectedAPI: "sal", 
            expectedStrategy: "sal_primary"
        },
        {
            name: "Global Brand - Nutella",
            query: "Nutella hazelnut spread",
            brand: "nutella",
            expectedCode: "3017620422003", 
            expectedAPI: "sal",
            expectedStrategy: "sal_primary"
        },
        
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã ‚Üí –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        {
            name: "Unknown Brand",
            query: "some unknown brand chocolate",
            brand: "unknown-brand",
            expectedCode: null,
            expectedAPI: "parallel",
            expectedStrategy: "parallel"
        },
        
        // –ë–µ–∑ –±—Ä–µ–Ω–¥–∞ ‚Üí –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        {
            name: "No Brand",
            query: "chocolate milk",
            brand: null,
            expectedCode: null,
            expectedAPI: "parallel",
            expectedStrategy: "parallel"
        }
    ];
    
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testCases.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞\n`);
    
    for (let i = 0; i < testCases.length; i++) {
        const testCase = testCases[i];
        console.log(`[${i + 1}/${testCases.length}] ${testCase.name}`);
        console.log(`Query: "${testCase.query}"`);
        console.log(`Brand: ${testCase.brand || 'none'}`);
        console.log(`Expected API: ${testCase.expectedAPI}`);
        
        try {
            const startTime = Date.now();
            const results = await searchByNameV1(testCase.query, {
                brand: testCase.brand,
                pageSize: 20,
                expectedBarcode: testCase.expectedCode
            });
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ Results: ${results.products?.length || 0} products in ${duration}ms`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if (results.api_used) {
                console.log(`üåê API used: ${results.api_used} (expected: ${testCase.expectedAPI})`);
                console.log(`üéØ Strategy: ${results.strategy || 'unknown'}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                const apiMatch = results.api_used.includes(testCase.expectedAPI) || 
                                testCase.expectedAPI === 'parallel';
                console.log(`${apiMatch ? '‚úÖ' : '‚ùå'} API routing ${apiMatch ? 'correct' : 'unexpected'}`);
            }
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
            if (testCase.expectedCode && results.products) {
                const targetIndex = results.products.findIndex(p => p.code === testCase.expectedCode);
                if (targetIndex !== -1) {
                    console.log(`üéØ Target found at position ${targetIndex + 1}`);
                } else {
                    console.log(`‚ùå Target not found`);
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            if (results.products && results.products.length > 0) {
                console.log(`üìã Top 3 results:`);
                results.products.slice(0, 3).forEach((product, idx) => {
                    const name = product.product_name || 'N/A';
                    const brands = Array.isArray(product.brands) ? product.brands.join(', ') : product.brands || 'N/A';
                    console.log(`  ${idx + 1}. ${product.code} - ${name} (${brands})`);
                });
            }
            
        } catch (error) {
            console.log(`‚ùå Error: ${error.message}`);
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < testCases.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫
    console.log('üìä –ú–ï–¢–†–ò–ö–ò –£–ú–ù–û–ì–û –†–û–£–¢–ò–ù–ì–ê');
    console.log('===========================');
    searchMetrics.printReport();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    return searchMetrics.getSummary();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const isMainModule = import.meta.url.startsWith('file:') && 
    (import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/')) || 
     process.argv[1]?.endsWith('test-smart-routing.js'));

if (isMainModule) {
    testSmartRouting().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞:', error);
        process.exit(1);
    });
}

export { testSmartRouting };
