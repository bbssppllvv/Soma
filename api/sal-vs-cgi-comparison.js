/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö API OpenFoodFacts:
 * 1. SAL API ‚Üí https://world.openfoodfacts.org/api/v3/search
 * 2. Legacy CGI API ‚Üí https://world.openfoodfacts.org/cgi/search.pl
 * 
 * –¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π API –¥–∞—ë—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–∏—à–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */

import https from 'https';
import fs from 'fs';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
const TEST_PRODUCTS = [
    {
        name: "Central Lechera Asturiana Nata Montada",
        query: "Central Lechera Asturiana nata montada",
        expectedBarcode: "8410297121104",
        description: "cl√°sica, –æ–±—ã—á–Ω—ã–µ —Å–ª–∏–≤–∫–∏"
    },
    {
        name: "Central Lechera Asturiana Nata ligera",
        query: "Central Lechera Asturiana nata ligera",
        expectedBarcode: "8410297120176",
        description: "–ª—ë–≥–∫–∏–µ —Å–ª–∏–≤–∫–∏ / l√≠quida para cocinar"
    },
    {
        name: "Central Lechera Asturiana Nata montada sin lactosa",
        query: "Central Lechera Asturiana nata montada sin lactosa",
        expectedBarcode: "8410297121234",
        description: "–±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–µ —Å–ª–∏–≤–∫–∏"
    },
    {
        name: "Coca-Cola Zero Sugar (Asian)",
        query: "Coca-Cola Zero Sugar",
        expectedBarcode: "8851959132074",
        description: "–∞–∑–∏–∞—Ç—Å–∫–∏–π –∫–æ–¥, –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö"
    },
    {
        name: "Coca-Cola Zero (European)",
        query: "Coca-Cola Zero",
        expectedBarcode: "5000112658637",
        description: "–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –∫–æ–¥, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã, 250 –º–ª"
    },
    {
        name: "Pepsi Max Cherry",
        query: "Pepsi Max Cherry",
        expectedBarcode: "5352201084422",
        description: "–≤–∏—à–Ω—ë–≤–∞—è Pepsi Max"
    },
    {
        name: "Ben & Jerry's Chocolate Fudge Brownie",
        query: "Ben Jerry Chocolate Fudge Brownie",
        expectedBarcode: "0076840303236",
        description: "dairy ice cream"
    },
    {
        name: "Nutella",
        query: "Nutella hazelnut spread",
        expectedBarcode: "3017620422003",
        description: "classic spread"
    },
    {
        name: "H-E-B Red Kidney Beans",
        query: "red kidney beans water",
        expectedBarcode: "0644216479092",
        description: "fallback –¥–ª—è Amazon brand"
    }
];

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
 */
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        
        const req = https.request(url, options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                const responseTime = Date.now() - startTime;
                try {
                    const parsedData = JSON.parse(data);
                    resolve({
                        data: parsedData,
                        responseTime,
                        statusCode: res.statusCode
                    });
                } catch (error) {
                    reject(new Error(`JSON parse error: ${error.message}`));
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        req.setTimeout(30000, () => {
            req.abort();
            reject(new Error('Request timeout'));
        });
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ SAL
 */
function extractBrandSlug(productName) {
    const brandMappings = {
        'Central Lechera Asturiana': 'central-lechera-asturiana',
        'Coca-Cola': 'coca-cola',
        'Pepsi': 'pepsi',
        'Ben & Jerry': 'ben-jerry-s',
        'Nutella': 'nutella',
        'H-E-B': 'h-e-b'
    };
    
    for (const [brand, slug] of Object.entries(brandMappings)) {
        if (productName.includes(brand)) {
            return slug;
        }
    }
    
    return null;
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SAL API (v2) - –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–± —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function searchSAL(query, productName = '', maxPages = 10) {
    const url = 'https://search.openfoodfacts.org/search';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const brandSlug = extractBrandSlug(productName);
    
    const allProducts = [];
    let totalResponseTime = 0;
    let totalResults = 0;
    
    console.log(`    üîç SAL: –ø–æ–∏—Å–∫ "${query}" —Å —Ñ–∏–ª—å—Ç—Ä–æ–º "${brandSlug || '–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞'}"`);
    
    for (let page = 1; page <= maxPages; page++) {
        const requestBody = {
            q: query,
            page: page,
            page_size: 40,
            langs: ["es", "en"],
            boost_phrase: true
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
        if (brandSlug) {
            requestBody.filters = {
                brands_tags: [brandSlug]
            };
        }
        
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (page === 1) {
            console.log(`    üì§ SAL request body:`, JSON.stringify(requestBody, null, 2));
        }
        
        try {
            const result = await makeRequest(url, options);
            const pageProducts = result.data.hits || [];
            
            if (page === 1) {
                totalResults = result.data.count || 0;
                console.log(`    üìä SAL: –≤—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ${totalResults}, –ø–æ–ª—É—á–∞–µ–º –¥–æ ${maxPages * 40}`);
            }
            
            allProducts.push(...pageProducts);
            totalResponseTime += result.responseTime;
            
            // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º page_size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (pageProducts.length < 40) {
                console.log(`    ‚èπÔ∏è SAL: –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} (–ø–æ–ª—É—á–µ–Ω–æ ${pageProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)`);
                break;
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            if (page < maxPages) {
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
        } catch (error) {
            console.log(`    ‚ùå SAL: –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${error.message}`);
            if (page === 1) {
                return {
                    success: false,
                    error: error.message,
                    products: [],
                    responseTime: null,
                    totalResults: 0,
                    brandFilter: brandSlug,
                    pagesProcessed: 0
                };
            }
            break;
        }
    }
    
    console.log(`    ‚úÖ SAL: —Å–æ–±—Ä–∞–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ ${totalResponseTime}–º—Å`);
    
    return {
        success: true,
        products: allProducts,
        responseTime: totalResponseTime,
        totalResults: totalResults,
        brandFilter: brandSlug,
        pagesProcessed: Math.min(maxPages, Math.ceil(allProducts.length / 40))
    };
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Legacy CGI API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
async function searchCGI(query, productName = '') {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const brandSlug = extractBrandSlug(productName);
    const brandName = getBrandName(productName);
    
    let url = `https://world.openfoodfacts.org/cgi/search.pl?search_simple=1&action=process&json=1&search_terms=${encodeURIComponent(query)}&page_size=60`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
    if (brandName) {
        url += `&tagtype_0=brands&tag_contains_0=contains&tag_0=${encodeURIComponent(brandName)}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    url += `&fields=code,brands,brands_tags,product_name,categories_tags,labels_tags`;
    
    console.log(`    üîç CGI: –ø–æ–∏—Å–∫ "${query}" —Å –±—Ä–µ–Ω–¥–æ–º "${brandName || '–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞'}"`);
    console.log(`    üì§ CGI URL: ${url}`);
    
    try {
        const result = await makeRequest(url);
        const products = result.data.products || [];
        const totalResults = result.data.count || products.length;
        
        console.log(`    ‚úÖ CGI: –ø–æ–ª—É—á–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ ${result.responseTime}–º—Å`);
        
        return {
            success: true,
            products: products,
            responseTime: result.responseTime,
            totalResults: totalResults,
            brandFilter: brandName
        };
    } catch (error) {
        console.log(`    ‚ùå CGI: –æ—à–∏–±–∫–∞ ${error.message}`);
        return {
            success: false,
            error: error.message,
            products: [],
            responseTime: null,
            totalResults: 0,
            brandFilter: brandName
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è CGI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
function getBrandName(productName) {
    const brandMappings = {
        'Central Lechera Asturiana': 'Central Lechera Asturiana',
        'Coca-Cola': 'Coca-Cola',
        'Pepsi': 'Pepsi',
        'Ben & Jerry': 'Ben & Jerry\'s',
        'Nutella': 'Nutella',
        'H-E-B': 'H-E-B'
    };
    
    for (const [brand, fullName] of Object.entries(brandMappings)) {
        if (productName.includes(brand)) {
            return fullName;
        }
    }
    
    return null;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
function analyzeResults(testProduct, salResults, cgiResults) {
    const analysis = {
        product: testProduct.name,
        query: testProduct.query,
        expectedBarcode: testProduct.expectedBarcode,
        description: testProduct.description,
        sal: {
            success: salResults.success,
            responseTime: salResults.responseTime,
            totalResults: salResults.totalResults,
            targetPosition: -1,
            topResults: [],
            error: salResults.error || null
        },
        cgi: {
            success: cgiResults.success,
            responseTime: cgiResults.responseTime,
            totalResults: cgiResults.totalResults,
            targetPosition: -1,
            topResults: [],
            error: cgiResults.error || null
        },
        winner: null,
        notes: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SAL —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (salResults.success && salResults.products.length > 0) {
        // –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis.sal.topResults = salResults.products.slice(0, 5).map(p => ({
            code: p.code,
            name: p.product_name || 'N/A',
            brands: p.brands || 'N/A'
        }));

        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        const targetIndex = salResults.products.findIndex(p => p.code === testProduct.expectedBarcode);
        if (targetIndex !== -1) {
            analysis.sal.targetPosition = targetIndex + 1;
        }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CGI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (cgiResults.success && cgiResults.products.length > 0) {
        // –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis.cgi.topResults = cgiResults.products.slice(0, 5).map(p => ({
            code: p.code,
            name: p.product_name || 'N/A',
            brands: p.brands || 'N/A'
        }));

        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        const targetIndex = cgiResults.products.findIndex(p => p.code === testProduct.expectedBarcode);
        if (targetIndex !== -1) {
            analysis.cgi.targetPosition = targetIndex + 1;
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (analysis.sal.targetPosition > 0 && analysis.cgi.targetPosition > 0) {
        if (analysis.sal.targetPosition < analysis.cgi.targetPosition) {
            analysis.winner = 'SAL';
            analysis.notes.push(`SAL –Ω–∞—à—ë–ª –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.sal.targetPosition}, CGI –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.cgi.targetPosition}`);
        } else if (analysis.cgi.targetPosition < analysis.sal.targetPosition) {
            analysis.winner = 'CGI';
            analysis.notes.push(`CGI –Ω–∞—à—ë–ª –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.cgi.targetPosition}, SAL –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.sal.targetPosition}`);
        } else {
            analysis.winner = 'TIE';
            analysis.notes.push(`–û–±–∞ API –Ω–∞—à–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ ${analysis.sal.targetPosition}`);
        }
    } else if (analysis.sal.targetPosition > 0) {
        analysis.winner = 'SAL';
        analysis.notes.push(`–¢–æ–ª—å–∫–æ SAL –Ω–∞—à—ë–ª –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.sal.targetPosition}`);
    } else if (analysis.cgi.targetPosition > 0) {
        analysis.winner = 'CGI';
        analysis.notes.push(`–¢–æ–ª—å–∫–æ CGI –Ω–∞—à—ë–ª –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.cgi.targetPosition}`);
    } else {
        analysis.winner = 'NONE';
        analysis.notes.push('–ù–∏ –æ–¥–∏–Ω API –Ω–µ –Ω–∞—à—ë–ª —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (analysis.sal.responseTime && analysis.cgi.responseTime) {
        const faster = analysis.sal.responseTime < analysis.cgi.responseTime ? 'SAL' : 'CGI';
        const diff = Math.abs(analysis.sal.responseTime - analysis.cgi.responseTime);
        analysis.notes.push(`${faster} –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${diff}–º—Å`);
    }

    return analysis;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
 */
function generateSummaryReport(results) {
    const summary = {
        totalTests: results.length,
        salWins: 0,
        cgiWins: 0,
        ties: 0,
        noResults: 0,
        avgResponseTime: {
            sal: 0,
            cgi: 0
        },
        successRate: {
            sal: 0,
            cgi: 0
        }
    };

    let salResponseTimes = [];
    let cgiResponseTimes = [];
    let salSuccesses = 0;
    let cgiSuccesses = 0;

    results.forEach(result => {
        switch (result.winner) {
            case 'SAL':
                summary.salWins++;
                break;
            case 'CGI':
                summary.cgiWins++;
                break;
            case 'TIE':
                summary.ties++;
                break;
            case 'NONE':
                summary.noResults++;
                break;
        }

        if (result.sal.success) {
            salSuccesses++;
            if (result.sal.responseTime) {
                salResponseTimes.push(result.sal.responseTime);
            }
        }

        if (result.cgi.success) {
            cgiSuccesses++;
            if (result.cgi.responseTime) {
                cgiResponseTimes.push(result.cgi.responseTime);
            }
        }
    });

    summary.successRate.sal = (salSuccesses / summary.totalTests * 100).toFixed(1);
    summary.successRate.cgi = (cgiSuccesses / summary.totalTests * 100).toFixed(1);

    if (salResponseTimes.length > 0) {
        summary.avgResponseTime.sal = Math.round(salResponseTimes.reduce((a, b) => a + b, 0) / salResponseTimes.length);
    }

    if (cgiResponseTimes.length > 0) {
        summary.avgResponseTime.cgi = Math.round(cgiResponseTimes.reduce((a, b) => a + b, 0) / cgiResponseTimes.length);
    }

    return summary;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runComparison() {
    console.log('üîç –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SAL vs CGI API');
    console.log('=' .repeat(60));

    const results = [];

    for (let i = 0; i < TEST_PRODUCTS.length; i++) {
        const product = TEST_PRODUCTS[i];
        console.log(`\n[${i + 1}/${TEST_PRODUCTS.length}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${product.name}`);
        console.log(`Query: "${product.query}"`);
        console.log(`Expected: ${product.expectedBarcode}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [salResults, cgiResults] = await Promise.all([
            searchSAL(product.query, product.name, 10), // 10 —Å—Ç—Ä–∞–Ω–∏—Ü = –¥–æ 400 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            searchCGI(product.query, product.name)       // 60 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        ]);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const analysis = analyzeResults(product, salResults, cgiResults);
        results.push(analysis);

        // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const salInfo = analysis.sal.success ? 
            `—Å–æ–±—Ä–∞–Ω–æ ${salResults.products.length} –∏–∑ ${analysis.sal.totalResults}, ${analysis.sal.responseTime}–º—Å, ${salResults.pagesProcessed} —Å—Ç—Ä${salResults.brandFilter ? ` (—Ñ–∏–ª—å—Ç—Ä: ${salResults.brandFilter})` : ''}` : 
            `–û–®–ò–ë–ö–ê: ${analysis.sal.error}`;
        const cgiInfo = analysis.cgi.success ? 
            `${analysis.cgi.totalResults} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, ${analysis.cgi.responseTime}–º—Å${cgiResults.brandFilter ? ` (—Ñ–∏–ª—å—Ç—Ä: ${cgiResults.brandFilter})` : ''}` : 
            `–û–®–ò–ë–ö–ê: ${analysis.cgi.error}`;
            
        console.log(`üìä SAL: ${salInfo}`);
        console.log(`üìä CGI: ${cgiInfo}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (analysis.sal.targetPosition > 0) {
            console.log(`üéØ SAL: —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.sal.targetPosition}`);
        }
        if (analysis.cgi.targetPosition > 0) {
            console.log(`üéØ CGI: —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${analysis.cgi.targetPosition}`);
        }
        
        console.log(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${analysis.winner}`);
        
        if (analysis.notes.length > 0) {
            console.log(`üìù ${analysis.notes.join(', ')}`);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (analysis.sal.success && analysis.sal.topResults.length > 0) {
            console.log(`üîç SAL —Ç–æ–ø-5 –∫–æ–¥—ã: ${analysis.sal.topResults.slice(0, 5).map(r => r.code).join(', ')}`);
        }
        if (analysis.cgi.success && analysis.cgi.topResults.length > 0) {
            console.log(`üîç CGI —Ç–æ–ø-5 –∫–æ–¥—ã: ${analysis.cgi.topResults.slice(0, 5).map(r => r.code).join(', ')}`);
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        if (i < TEST_PRODUCTS.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
    const summary = generateSummaryReport(results);

    console.log('\n' + '=' .repeat(60));
    console.log('üìä –°–í–û–î–ù–´–ô –û–¢–ß–Å–¢');
    console.log('=' .repeat(60));
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${summary.totalTests}`);
    console.log(`SAL –ø–æ–±–µ–¥: ${summary.salWins}`);
    console.log(`CGI –ø–æ–±–µ–¥: ${summary.cgiWins}`);
    console.log(`–ù–∏—á—å–∏—Ö: ${summary.ties}`);
    console.log(`–ë–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${summary.noResults}`);
    console.log(`\n–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤:`);
    console.log(`SAL: ${summary.successRate.sal}%`);
    console.log(`CGI: ${summary.successRate.cgi}%`);
    console.log(`\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:`);
    console.log(`SAL: ${summary.avgResponseTime.sal}–º—Å`);
    console.log(`CGI: ${summary.avgResponseTime.cgi}–º—Å`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `sal-vs-cgi-results_${timestamp}.json`;
    
    const fullReport = {
        timestamp: new Date().toISOString(),
        summary,
        detailedResults: results
    };

    fs.writeFileSync(filename, JSON.stringify(fullReport, null, 2));
    console.log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filename}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n' + '=' .repeat(60));
    console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('=' .repeat(60));

    if (summary.salWins > summary.cgiWins) {
        console.log('‚úÖ SAL API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SAL –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π API');
    } else if (summary.cgiWins > summary.salWins) {
        console.log('‚úÖ CGI API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ CGI API');
    } else {
        console.log('‚öñÔ∏è –û–±–∞ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
    }

    if (summary.avgResponseTime.sal < summary.avgResponseTime.cgi) {
        console.log(`‚ö° SAL –±—ã—Å—Ç—Ä–µ–µ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ ${summary.avgResponseTime.cgi - summary.avgResponseTime.sal}–º—Å`);
    } else if (summary.avgResponseTime.cgi < summary.avgResponseTime.sal) {
        console.log(`‚ö° CGI –±—ã—Å—Ç—Ä–µ–µ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ ${summary.avgResponseTime.sal - summary.avgResponseTime.cgi}–º—Å`);
    }

    if (summary.noResults > 0) {
        console.log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: ${summary.noResults} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º API`);
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
const isMainModule = import.meta.url.startsWith('file:') && 
    import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/'));

if (isMainModule || process.argv[1]?.endsWith('sal-vs-cgi-comparison.js')) {
    runComparison().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

export {
    runComparison,
    searchSAL,
    searchCGI,
    TEST_PRODUCTS
};
