#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–æ–∏—Å–∫–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É, brand boost –∏ rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */

import { resolveOneItemOFF } from './modules/nutrition/off-resolver.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
const testCases = [
  {
    name: 'Central Lechera Asturiana Nata Montada',
    item: {
      name: 'nata montada',
      brand: 'Central Lechera Asturiana',
      off_primary_tokens: ['nata', 'montada'],
      off_brand_filter: 'central-lechera-asturiana',
      locale: 'es'
    },
    expectedCode: '8410297121104',
    description: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–µ–π—Å - –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ 10-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
  },
  {
    name: 'Generic Brand Test',
    item: {
      name: 'chocolate milk',
      brand: 'Hacendado',
      off_primary_tokens: ['chocolate', 'milk'],
      off_brand_filter: 'hacendado',
      locale: 'es'
    },
    expectedCode: null, // –ù–µ –∑–Ω–∞–µ–º —Ç–æ—á–Ω—ã–π –∫–æ–¥, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞—á–µ—Å—Ç–≤–æ
    description: '–¢–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±—Ä–µ–Ω–¥'
  },
  {
    name: 'Rescue Strategy Test',
    item: {
      name: 'organic almond milk unsweetened',
      brand: 'SomeUnknownBrand',
      off_primary_tokens: ['organic', 'almond', 'milk'],
      off_brand_filter: 'some-unknown-brand',
      off_neg_tokens: ['sweetened'],
      locale: 'en'
    },
    expectedCode: null,
    description: '–¢–µ—Å—Ç rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –±—Ä–µ–Ω–¥–æ–º'
  }
];

async function runSingleTest(testCase, index) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`–¢–ï–°–¢ ${index + 1}: ${testCase.name}`);
  console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}`);
  console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥: ${testCase.expectedCode || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
  console.log(`${'='.repeat(60)}`);

  const startTime = Date.now();
  
  try {
    const result = await resolveOneItemOFF(testCase.item);
    const duration = Date.now() - startTime;
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
    
    if (result?.product) {
      const product = result.product;
      const isExpectedMatch = testCase.expectedCode ? 
        product.code === testCase.expectedCode : false;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ${product.code}`);
      console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.product_name}`);
      console.log(`üè∑Ô∏è –ë—Ä–µ–Ω–¥: ${product.brands || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`‚≠ê –°–∫–æ—Ä: ${result.score || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
      console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${result.confidence || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è: ${duration}ms`);
      
      if (testCase.expectedCode) {
        if (isExpectedMatch) {
          console.log('üéâ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç!');
        } else {
          console.log(`‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è ${testCase.expectedCode}, –ø–æ–ª—É—á–µ–Ω ${product.code}`);
        }
      }
      
      return {
        success: true,
        foundExpected: isExpectedMatch,
        code: product.code,
        duration,
        score: result.score,
        confidence: result.confidence
      };
      
    } else {
      console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è: ${duration}ms`);
      
      if (result?.failure) {
        console.log(`üîç –ü—Ä–∏—á–∏–Ω–∞: ${result.failure.reason}`);
      }
      
      return {
        success: false,
        foundExpected: false,
        duration,
        reason: result?.failure?.reason || 'unknown'
      };
    }
    
  } catch (error) {
    const duration = Date.now() - startTime;
    console.log(`üí• –û–®–ò–ë–ö–ê: ${error.message}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è: ${duration}ms`);
    
    return {
      success: false,
      foundExpected: false,
      duration,
      error: error.message
    };
  }
}

async function runBenchmark() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É, brand boost –∏ rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
  
  const results = [];
  
  for (let i = 0; i < testCases.length; i++) {
    const result = await runSingleTest(testCases[i], i);
    results.push({
      testCase: testCases[i].name,
      ...result
    });
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (i < testCases.length - 1) {
      console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log(`\n${'='.repeat(80)}`);
  console.log('üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
  console.log(`${'='.repeat(80)}`);
  
  const successful = results.filter(r => r.success);
  const expectedMatches = results.filter(r => r.foundExpected);
  const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
  
  console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
  console.log(`  –£—Å–ø–µ—à–Ω—ã—Ö: ${successful.length} (${(successful.length/results.length*100).toFixed(1)}%)`);
  console.log(`  –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${expectedMatches.length}`);
  console.log(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(0)}ms`);
  
  console.log(`\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º:`);
  results.forEach((result, idx) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const expected = result.foundExpected ? 'üéØ' : '';
    const time = `${result.duration}ms`;
    console.log(`  ${idx + 1}. ${status} ${result.testCase} ${expected} (${time})`);
    
    if (result.error) {
      console.log(`     üí• ${result.error}`);
    } else if (!result.success && result.reason) {
      console.log(`     üîç ${result.reason}`);
    }
  });
  
  console.log(`\nüéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:`);
  console.log(`  ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è brand+variant`);
  console.log(`  ‚Ä¢ Brand boost –º–Ω–æ–∂–∏—Ç–µ–ª—å ${process.env.OFF_BRAND_BOOST_MULTIPLIER || 2.0}x`);
  console.log(`  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ rescue —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º`);
  console.log(`  ‚Ä¢ –†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–µ–π—Å
  const mainTest = results.find(r => r.testCase.includes('Central Lechera'));
  if (mainTest) {
    console.log(`\nüéØ –û–°–ù–û–í–ù–û–ô –ö–ï–ô–° (Central Lechera Asturiana):`);
    if (mainTest.foundExpected) {
      console.log(`  ‚úÖ –†–ï–®–Å–ù! –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –∑–∞ ${mainTest.duration}ms`);
    } else if (mainTest.success) {
      console.log(`  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç: ${mainTest.code}`);
      console.log(`  üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞`);
    } else {
      console.log(`  ‚ùå –ü—Ä–æ–¥—É–∫—Ç –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.log(`  üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è`);
    }
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  runBenchmark()
    .then(results => {
      console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
