import TelegramBot from 'node-telegram-bot-api';
import { DailyEntry, WeeklyStats, MonthlyStats, User } from '../types';

export class TelegramUtils {
  /**
   * Format meal response message
   */
  static formatMealResponse(
    calories: number,
    protein: number,
    fat: number,
    carbs: number,
    fiber: number,
    advice: string,
    confidence?: number
  ): string {
    let message = 'üçΩÔ∏è –ü—Ä–∏–Ω—è–ª.\n';
    message += `~${calories} –∫–∫–∞–ª ‚Ä¢ –ë ${protein} –≥ ‚Ä¢ –ñ ${fat} –≥ ‚Ä¢ –£ ${carbs} –≥ ‚Ä¢ –ö–ª–µ—Ç—á ${fiber} –≥\n`;
    
    if (confidence && confidence < 0.6) {
      message += '‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ\n';
    }
    
    message += `üí° ${advice}`;
    
    return message;
  }

  /**
   * Format daily summary message
   */
  static formatDailyReport(
    date: string,
    dailyData: DailyEntry,
    user: User,
    advice?: string
  ): string {
    const dateFormatted = new Date(date + 'T00:00:00').toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: 'short'
    });

    let message = `üìä –ò—Ç–æ–≥–∏ –¥–Ω—è (${dateFormatted}):\n`;
    message += `–ö–∫–∞–ª ~${dailyData.calories_sum} / —Ü–µ–ª—å ${user.cal_goal}\n`;
    message += `–ë–µ–ª–æ–∫ ${dailyData.protein_sum} –≥ / —Ü–µ–ª—å ${user.protein_goal_g}\n`;
    message += `–ö–ª–µ—Ç—á–∞—Ç–∫–∞ ${dailyData.fiber_sum} –≥ / —Ü–µ–ª—å ${user.fiber_goal_g}\n`;
    
    // Add progress indicators
    const calProgress = dailyData.calories_sum / user.cal_goal;
    const proteinProgress = dailyData.protein_sum / user.protein_goal_g;
    const fiberProgress = dailyData.fiber_sum / user.fiber_goal_g;
    
    const calIcon = calProgress >= 0.85 && calProgress <= 1.15 ? '‚úÖ' : calProgress < 0.85 ? 'üìâ' : 'üìà';
    const proteinIcon = proteinProgress >= 1.0 ? '‚úÖ' : 'üìâ';
    const fiberIcon = fiberProgress >= 1.0 ? '‚úÖ' : 'üìâ';
    
    message += `${calIcon} ${dailyData.meals_count} –ø—Ä–∏—ë–º–∞ ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–Ω—è ${dailyData.daily_score.toFixed(1)}/10\n`;
    
    if (advice) {
      message += `üí° –ó–∞–≤—Ç—Ä–∞: ${advice}`;
    }
    
    return message;
  }

  /**
   * Format today's summary
   */
  static formatTodayResponse(
    dailyData: DailyEntry | null,
    user: User,
    dayLocal: string
  ): string {
    if (!dailyData || dailyData.meals_count === 0) {
      return 'üìù –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.';
    }

    return this.formatDailyReport(dayLocal, dailyData, user);
  }

  /**
   * Format weekly summary
   */
  static formatWeeklyReport(
    weeklyStats: WeeklyStats,
    user: User,
    advice: string
  ): string {
    let message = 'üìà –ù–µ–¥–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):\n\n';
    
    message += `üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–µ–Ω—å:\n`;
    message += `–ö–∫–∞–ª: ${weeklyStats.avg_calories} (—Ü–µ–ª—å ${user.cal_goal})\n`;
    message += `–ë–µ–ª–æ–∫: ${weeklyStats.avg_protein} –≥ (—Ü–µ–ª—å ${user.protein_goal_g})\n`;
    message += `–ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${weeklyStats.avg_fiber} –≥ (—Ü–µ–ª—å ${user.fiber_goal_g})\n\n`;
    
    message += `üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ü–µ–ª–∏:\n`;
    message += `–ö–∞–ª–æ—Ä–∏–∏: ${weeklyStats.days_in_cal_range}/${weeklyStats.days_count} –¥–Ω–µ–π\n`;
    message += `–ë–µ–ª–æ–∫: ${weeklyStats.days_protein_met}/${weeklyStats.days_count} –¥–Ω–µ–π\n`;
    message += `–ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${weeklyStats.days_fiber_met}/${weeklyStats.days_count} –¥–Ω–µ–π\n\n`;
    
    message += `‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${weeklyStats.avg_daily_score}/10\n\n`;
    message += `üí° ${advice}`;
    
    return message;
  }

  /**
   * Format monthly summary
   */
  static formatMonthlyReport(
    monthlyStats: MonthlyStats,
    user: User,
    advice: string
  ): string {
    let message = 'üìÖ –ú–µ—Å—è—Ü (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):\n\n';
    
    message += `üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–µ–Ω—å:\n`;
    message += `–ö–∫–∞–ª: ${monthlyStats.avg_calories} (—Ü–µ–ª—å ${user.cal_goal})\n`;
    message += `–ë–µ–ª–æ–∫: ${monthlyStats.avg_protein} –≥ (—Ü–µ–ª—å ${user.protein_goal_g})\n`;
    message += `–ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${monthlyStats.avg_fiber} –≥ (—Ü–µ–ª—å ${user.fiber_goal_g})\n\n`;
    
    message += `üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ü–µ–ª–∏:\n`;
    message += `–ö–∞–ª–æ—Ä–∏–∏: ${monthlyStats.days_in_cal_range}/${monthlyStats.days_count} –¥–Ω–µ–π (${Math.round(monthlyStats.days_in_cal_range/monthlyStats.days_count*100)}%)\n`;
    message += `–ë–µ–ª–æ–∫: ${monthlyStats.days_protein_met}/${monthlyStats.days_count} –¥–Ω–µ–π (${Math.round(monthlyStats.days_protein_met/monthlyStats.days_count*100)}%)\n`;
    message += `–ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${monthlyStats.days_fiber_met}/${monthlyStats.days_count} –¥–Ω–µ–π (${Math.round(monthlyStats.days_fiber_met/monthlyStats.days_count*100)}%)\n\n`;
    
    // Trend indicator
    const trendEmoji = monthlyStats.trend === 'improving' ? 'üìà' : 
                      monthlyStats.trend === 'declining' ? 'üìâ' : '‚û°Ô∏è';
    message += `${trendEmoji} –¢—Ä–µ–Ω–¥: `;
    switch (monthlyStats.trend) {
      case 'improving':
        message += '—É–ª—É—á—à–∞–µ—Ç—Å—è\n';
        break;
      case 'declining':
        message += '—Å–Ω–∏–∂–∞–µ—Ç—Å—è\n';
        break;
      default:
        message += '—Å—Ç–∞–±–∏–ª—å–Ω–æ\n';
    }
    
    message += `‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${monthlyStats.avg_daily_score}/10\n\n`;
    message += `üí° ${advice}`;
    
    return message;
  }

  /**
   * Format goals display
   */
  static formatGoalsDisplay(user: User): string {
    let message = 'üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n';
    message += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${user.cal_goal} –∫–∫–∞–ª\n`;
    message += `üí™ –ë–µ–ª–æ–∫: ${user.protein_goal_g} –≥\n`;
    message += `üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${user.fiber_goal_g} –≥\n`;
    message += `üïò –û—Ç—á—ë—Ç –≤: ${user.daily_digest_time}\n`;
    message += `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone}\n\n`;
    message += `–ò–∑–º–µ–Ω–∏—Ç—å: /setgoals cal=1800 protein=120 fiber=25`;
    
    return message;
  }

  /**
   * Format help message
   */
  static formatHelpMessage(): string {
    return `ü§ñ Soma - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º
üîç –ü–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∫–∞–ª–æ—Ä–∏–π, –ë–ñ–£ –∏ —Å–æ–≤–µ—Ç

üìã –ö–æ–º–∞–Ω–¥—ã:
/today - —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç
/report - –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç —Å —Å–æ–≤–µ—Ç–∞–º–∏
/week - –Ω–µ–¥–µ–ª—è (7 –¥–Ω–µ–π)
/month - –º–µ—Å—è—Ü (30 –¥–Ω–µ–π)
/goals - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏
/setgoals cal=1800 protein=120 fiber=25 - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/delete_me - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

üí° –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å "–∫–∞–∫ –º–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π" –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥`;
  }

  /**
   * Format start/onboarding message
   */
  static formatStartMessage(): string {
    return `üëã –ü—Ä–∏–≤–µ—Ç! –Ø Soma, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è.

üì∏ –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏
üîç –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –∏ –∫–ª–µ—Ç—á–∞—Ç–∫—É
üí° –î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π

üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏: 1800 –∫–∫–∞–ª, 120–≥ –±–µ–ª–∫–∞, 25–≥ –∫–ª–µ—Ç—á–∞—Ç–∫–∏
üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 21:30

–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /setgoals –∏–ª–∏ /goals
–°–ø—Ä–∞–≤–∫–∞: /help

–ù–∞—á–Ω–∏—Ç–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏! üçΩÔ∏è`;
  }

  /**
   * Format goals update confirmation
   */
  static formatGoalsUpdateMessage(user: User): string {
    return `‚úÖ –¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:

üî• –ö–∞–ª–æ—Ä–∏–∏: ${user.cal_goal} –∫–∫–∞–ª
üí™ –ë–µ–ª–æ–∫: ${user.protein_goal_g} –≥  
üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${user.fiber_goal_g} –≥

–ù–æ–≤—ã–µ —Ü–µ–ª–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö.`;
  }

  /**
   * Format error message
   */
  static formatErrorMessage(error: string): string {
    return `‚ùå ${error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ /help`;
  }

  /**
   * Parse natural language commands
   */
  static parseNaturalCommand(text: string): string | null {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π') || lowerText.includes('–Ω–µ–¥–µ–ª—è') || lowerText.includes('–∑–∞ –Ω–µ–¥–µ–ª—é')) {
      return '/week';
    }
    
    if (lowerText.includes('–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π') || lowerText.includes('–º–µ—Å—è—Ü') || lowerText.includes('–∑–∞ –º–µ—Å—è—Ü')) {
      return '/month';
    }
    
    if (lowerText.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerText.includes('–∏—Ç–æ–≥–∏ –¥–Ω—è')) {
      return '/today';
    }
    
    if (lowerText.includes('—Ü–µ–ª–∏') || lowerText.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏')) {
      return '/goals';
    }
    
    return null;
  }

  /**
   * Parse setgoals command
   */
  static parseSetGoalsCommand(text: string): Partial<User> | null {
    const goals: Partial<User> = {};
    
    // Parse cal=1800
    const calMatch = text.match(/cal=(\d+)/i);
    if (calMatch) {
      goals.cal_goal = parseInt(calMatch[1]);
    }
    
    // Parse protein=120
    const proteinMatch = text.match(/protein=(\d+)/i);
    if (proteinMatch) {
      goals.protein_goal_g = parseInt(proteinMatch[1]);
    }
    
    // Parse fiber=25
    const fiberMatch = text.match(/fiber=(\d+)/i);
    if (fiberMatch) {
      goals.fiber_goal_g = parseInt(fiberMatch[1]);
    }
    
    // Parse timezone
    const timezoneMatch = text.match(/tz=([A-Za-z\/]+)/i);
    if (timezoneMatch) {
      goals.timezone = timezoneMatch[1];
    }
    
    // Parse digest time
    const timeMatch = text.match(/time=(\d{1,2}):(\d{2})/i);
    if (timeMatch) {
      goals.daily_digest_time = `${timeMatch[1].padStart(2, '0')}:${timeMatch[2]}`;
    }
    
    return Object.keys(goals).length > 0 ? goals : null;
  }

  /**
   * Validate and sanitize user input
   */
  static sanitizeInput(text: string): string {
    return text.trim().substring(0, 1000); // Limit length and trim
  }

  /**
   * Check if message is a command
   */
  static isCommand(text: string): boolean {
    return text.startsWith('/');
  }

  /**
   * Rate limit check (simple in-memory implementation)
   */
  private static userMessageCounts: Map<number, { count: number; resetTime: number }> = new Map();

  static checkRateLimit(userId: number, maxMessages: number = 30): boolean {
    const now = Date.now();
    const dayStart = new Date().setHours(0, 0, 0, 0);
    
    const userStats = this.userMessageCounts.get(userId);
    
    if (!userStats || userStats.resetTime < dayStart) {
      this.userMessageCounts.set(userId, { count: 1, resetTime: now });
      return true;
    }
    
    if (userStats.count >= maxMessages) {
      return false;
    }
    
    userStats.count++;
    return true;
  }
}
